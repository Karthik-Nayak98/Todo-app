{"version":3,"sources":["components/ListComponent.jsx","config/firebase.utils.js","components/MainComponent.jsx","components/LoginComponent.jsx","components/SignUpComponent.jsx","helpers/PrivateRoute.js","App.js","serviceWorker.js","index.js"],"names":["List","props","tasks","map","item","className","key","id","value","onClick","deleteItem","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","setPersistence","Auth","Persistence","LOCAL","database","Main","handleChange","event","persist","setState","currentTask","target","addItem","preventDefault","push","set","task","state","db","count","deleteTask","itemId","child","remove","EditItem","taskValue","filter","logout","signOut","username","uid","currentUser","ref","previousTasks","this","userId","once","then","snapshot","val","on","taskCount","exists","filteredArray","onSubmit","type","onChange","required","length","taskCompleted","Component","INITIAL_STATE","email","password","error","touched","loading","Login","handleSubmit","a","signInWithEmailAndPassword","history","name","handleBlur","field","validate","errors","test","onBlur","radius","color","stroke","visible","to","SignUp","createUserWithEmailAndPassword","resp","user","PrivateRoute","RouteComponent","component","authenticated","rest","render","restProps","App","currentuser","onAuthStateChanged","providerData","path","exact","Boolean","window","location","hostname","match","ReactDOM","StrictMode","basename","increment","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.cb758d37.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../styles/ListStyles.css\";\n\nexport const List = props =>\n  props.tasks.map(item => (\n    <div className=\"list-background\" key={item.id}>\n      <p className=\"list__items\">\n        <strong>{item.value}</strong>\n      </p>\n      <i\n        className=\"fa fa-times list__delete-icon\"\n        onClick={() => props.deleteItem(item.id)}\n      />\n    </div>\n  ));\n","import * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/database\";\n\nconst DB_CONFIG = {\n  apiKey: \"AIzaSyB8nD0nu2jG0cmyvLRBs3XgFwOg0b0cq8I\",\n  authDomain: \"todo-app-8c85e.firebaseapp.com\",\n  databaseURL: \"https://todo-app-8c85e.firebaseio.com\",\n  projectId: \"todo-app-8c85e\",\n  storageBucket: \"todo-app-8c85e.appspot.com\",\n  messagingSenderId: \"125772070027\",\n  appId: \"1:125772070027:web:1ffe3fd0560663a286288e\",\n  measurementId: \"G-KVNZJWDRBQ\",\n};\n\nconst app = firebase.initializeApp(DB_CONFIG);\napp.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL);\n\nexport { app };\nexport const auth = firebase.auth();\nexport const database = firebase.database();\n","import React, { Component } from \"react\";\nimport { List } from \"./ListComponent\";\nimport { database, auth } from \"../config/firebase.utils\";\nimport \"../styles/MainStyles.css\";\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tasks: [],\n      count: 0,\n      currentTask: \"\",\n      username: \"\",\n    };\n    const uid = auth.currentUser.uid;\n    this.database = database.ref(`users/${uid}`).child(\"task\");\n    this.db = database.ref(`users/${uid}`).child(\"taskCount\");\n  }\n\n  componentDidMount() {\n    let previousTasks = this.state.tasks;\n    const userId = auth.currentUser.uid;\n    database\n      .ref(\"users/\" + userId)\n      .once(\"value\")\n      .then((snapshot) => {\n        const username =\n          (snapshot.val() && snapshot.val().username) || \"Anonymous\";\n        this.setState({ username: username });\n      });\n\n    this.db.on(\"value\", (snapshot) => {\n      const taskCount = snapshot.exists() ? snapshot.val().count : 0;\n      this.setState({ count: taskCount });\n    });\n\n    this.database.on(\"child_added\", (snapshot) => {\n      previousTasks.push({\n        id: snapshot.key,\n        value: snapshot.val().task,\n      });\n\n      this.setState({\n        tasks: previousTasks,\n      });\n    });\n\n    this.database.on(\"child_removed\", (snapshot) => {\n      const filteredArray = previousTasks.filter((item) => {\n        return item.id !== snapshot.key;\n      });\n      this.setState({ tasks: filteredArray });\n      previousTasks = filteredArray; // to update the previous array after removing the item\n    });\n  }\n\n  handleChange = (event) => {\n    event.persist();\n    this.setState({\n      currentTask: event.target.value,\n    });\n  };\n\n  addItem = (event) => {\n    event.preventDefault();\n    this.database.push().set({\n      task: this.state.currentTask,\n    });\n\n    this.setState(() => ({\n      currentTask: \"\",\n    }));\n\n    this.db.set({\n      count: this.state.count + 1,\n    });\n  };\n\n  deleteTask = (itemId) => {\n    this.database.child(itemId).remove();\n    this.db.set({ count: this.state.count - 1 });\n    this.setState({ count: this.state.count - 1 });\n  };\n\n  EditItem = (itemId) => {\n    const taskValue = this.state.tasks.filter((item) => {\n      return item.id === itemId;\n    });\n    this.setState({ currentTask: taskValue[0].value }); // set the input field value\n  };\n\n  logout = () => {\n    auth.signOut();\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"column\">\n          <nav>\n            <p className=\"display-name\">\n              Logged in as: <span>{this.state.username}</span>\n            </p>\n            <button onClick={this.logout} className=\"logout\">\n              <i className=\"fa fa-sign-out\"></i> Logout\n            </button>\n          </nav>\n          <div className=\"card\">\n            <h1 className=\"card-header\">Todo List App</h1>\n            <form className=\"todo-form\" onSubmit={this.addItem}>\n              <div className=\"task-input\">\n                <input\n                  className=\"input-title\"\n                  type=\"text\"\n                  value={this.state.currentTask}\n                  onChange={this.handleChange}\n                  required\n                />\n                <label>Enter task</label>\n              </div>\n              <button className=\"todo__button\" type=\"submit\">\n                Add Task\n              </button>\n            </form>\n          </div>\n        </div>\n\n        <div className=\"column\">\n          <div className=\"card\">\n            {this.state.tasks.length === 0 ? (\n              <h1 className=\"card-header\">\n                Nothing Left to do!! Enjoy your day\n              </h1>\n            ) : (\n              <h1 className=\"card-header\">{this.state.count} Task to finish</h1>\n            )}\n\n            <List\n              tasks={this.state.tasks}\n              taskCompleted={this.taskCompleted}\n              deleteItem={this.deleteTask}\n              EditItem={this.EditItem}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { auth } from \"../config/firebase.utils\";\nimport Spinner from \"react-spinner-material\";\nimport \"../styles/LoginStyles.css\";\n\nconst INITIAL_STATE = {\n  email: \"\",\n  password: \"\",\n  error: false,\n  touched: {\n    email: false,\n    password: false,\n  },\n  loading: false,\n};\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...INITIAL_STATE };\n  }\n\n  handleSubmit = async (event) => {\n    event.preventDefault();\n    this.setState({ loading: true });\n    try {\n      // await auth().setPersistence(auth.Auth.Persistence.SESSION);\n      await auth.signInWithEmailAndPassword(\n        this.state.email,\n        this.state.password\n      );\n      // this.setState({ ...INITIAL_STATE, loading: false });\n      this.props.history.push(\"/todo\");\n    } catch (err) {\n      this.setState({ ...INITIAL_STATE, loading: false, error: true });\n    }\n  };\n\n  handleChange = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  handleBlur = (field) => (event) => {\n    this.setState({ touched: { ...this.state.touched, [field]: true } });\n  };\n\n  validate = (email, password) => {\n    const errors = {\n      email: \"\",\n      password: \"\",\n    };\n\n    const emailReg = /^[\\w-.]+@([\\w-]+.)+[\\w-]{2,4}$/;\n    if (this.state.touched.email && !emailReg.test(email))\n      errors.email = \"Email is invalid\";\n\n    const passwordReg = /^(?=.*[a-z])(?=.*[!-_.+@#$%^&*]).{5,}$/;\n    if (this.state.touched.password && !passwordReg.test(password))\n      errors.password =\n        \"Password should have special character & length should be >= 5\";\n\n    // errors.email.length && errors.password.length\n    //   ? this.setState({ isEnabled: !this.state.isEnabled })\n    //   : \"\";\n\n    return errors;\n  };\n\n  render() {\n    const errors = this.validate(this.state.email, this.state.password);\n\n    return (\n      <div className=\"box\">\n        <header className=\"box__header\">\n          <h1>Login</h1>\n          <span className=\"validation-error\">\n            {this.state.error ? \"Invalid username or password\" : \"\"}\n          </span>\n        </header>\n\n        <form onSubmit={this.handleSubmit}>\n          <div className=\"inputbox\">\n            <input\n              // style={{ paddingLeft: \"4px\" }}\n              type=\"text\"\n              className=\"mail\"\n              name=\"email\"\n              value={this.state.email}\n              onChange={this.handleChange}\n              onBlur={this.handleBlur(\"email\")}\n              required\n            />\n            <label>Email</label>\n            <span className=\"errors\">{errors.email}</span>\n          </div>\n          <div className=\"inputbox\">\n            <input\n              type=\"password\"\n              className=\"pass\"\n              name=\"password\"\n              value={this.state.password}\n              onChange={this.handleChange}\n              onBlur={this.handleBlur(\"password\")}\n              required\n            />\n            <label>Password</label>\n            <span className=\"errors\">{errors.password}</span>\n          </div>\n          <button\n            className={\n              this.state.loading ? \"submit-button loading\" : \"submit-button\"\n            }\n            type=\"submit\"\n            value=\"Login\"\n          >\n            Login\n            <span className=\"login-loader\">\n              {\n                <Spinner\n                  radius={30}\n                  color={\"#fc6c85\"}\n                  stroke={4}\n                  visible={this.state.loading}\n                />\n              }\n            </span>\n          </button>\n        </form>\n\n        <span className=\"page-change\">\n          Don't have an Account?&nbsp;&nbsp;\n          <Link to=\"/signup\">SignUp</Link>\n        </span>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { auth, database } from \"../config/firebase.utils\";\nimport Spinner from \"react-spinner-material\";\nimport \"../styles/LoginStyles.css\";\n\nconst INITIAL_STATE = {\n  username: \"\",\n  email: \"\",\n  password: \"\",\n  error: false,\n  touched: {\n    username: false,\n    email: false,\n    password: false,\n  },\n  loading: false,\n};\n\nclass SignUp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...INITIAL_STATE };\n  }\n\n  handleSubmit = async (event) => {\n    event.preventDefault();\n    this.setState({ loading: true });\n    try {\n      // await auth().setPersistence(auth.Auth.Persistence.SESSION);\n      const resp = await auth.createUserWithEmailAndPassword(\n        this.state.email,\n        this.state.password\n      );\n      this.database = database.ref(`users/${resp.user.uid}`).set({\n        username: this.state.username,\n      });\n      this.props.history.push(\"/todo\");\n    } catch (err) {\n      this.setState({ ...INITIAL_STATE, loading: false, error: true });\n    }\n  };\n\n  handleChange = (event) => {\n    event.persist();\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  handleBlur = (field) => (event) => {\n    this.setState({\n      touched: { ...this.state.touched, [field]: true },\n    });\n  };\n\n  validate = (username, email, password) => {\n    const errors = {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n    };\n\n    if (this.state.touched.username && username.length < 3)\n      errors.username = \"Username should be >= 3 characters\";\n    else if (this.state.touched.username && username.length > 15)\n      errors.username = \"Username should be <=15 characters\";\n\n    const emailReg = /^[\\w-.]+@([\\w-]+.)+[\\w-]{2,4}$/;\n    if (this.state.touched.email && !emailReg.test(email))\n      errors.email = \"Entered email is invalid\";\n\n    const passwordReg = /^(?=.*[a-z])(?=.*[!-_.+@#$%^&*]).{5,}$/;\n    if (this.state.touched.password && !passwordReg.test(password))\n      errors.password =\n        \"Password should have special character & length should be >= 5\";\n\n    return errors;\n  };\n\n  render() {\n    const errors = this.validate(\n      this.state.username,\n      this.state.email,\n      this.state.password\n    );\n\n    return (\n      <div className=\"box\">\n        <div className=\"box__header\">\n          <h1>SignUp</h1>\n          <span className=\"validation-error\">\n            {this.state.error ? \"User already exists\" : \"\"}\n          </span>\n        </div>\n\n        <form onSubmit={this.handleSubmit}>\n          <div className=\"inputbox\">\n            <input\n              type=\"text\"\n              className=\"username\"\n              name=\"username\"\n              onBlur={this.handleBlur(\"username\")}\n              value={this.state.username}\n              onChange={this.handleChange}\n              required\n            />\n            <label>User Name</label>\n            <span className=\"errors\">{errors.username}</span>\n          </div>\n\n          <div className=\"inputbox\">\n            <input\n              type=\"text\"\n              className=\"mail\"\n              name=\"email\"\n              onBlur={this.handleBlur(\"email\")}\n              value={this.state.email}\n              onChange={this.handleChange}\n              required\n            />\n            <label>Email</label>\n            <span className=\"errors\">{errors.email}</span>\n          </div>\n\n          <div className=\"inputbox\">\n            <input\n              type=\"password\"\n              className=\"pass\"\n              name=\"password\"\n              onBlur={this.handleBlur(\"password\")}\n              value={this.state.password}\n              onChange={this.handleChange}\n              required\n            />\n            <label>Password</label>\n            <span className=\"errors\">{errors.password}</span>\n          </div>\n          <button\n            className={\n              this.state.loading ? \"submit-button loading\" : \"submit-button\"\n            }\n            type=\"submit\"\n            value=\"SignUp\"\n          >\n            SignUp\n            <span className=\"login-loader signup-loader\">\n              {\n                <Spinner\n                  radius={30}\n                  color={\"#fc6c85\"}\n                  stroke={4}\n                  visible={this.state.loading}\n                />\n              }\n            </span>\n          </button>\n        </form>\n\n        <span className=\"page-change\">\n          Already have an Account?&nbsp;&nbsp;\n          <Link to=\"/login\">Login</Link>\n        </span>\n      </div>\n    );\n  }\n}\n\nexport default SignUp;\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nconst PrivateRoute = ({\n  component: RouteComponent,\n  authenticated,\n  ...rest\n}) => {\n  return (\n    <Route\n      {...rest}\n      render={(restProps) =>\n        authenticated === true ? (\n          <RouteComponent {...restProps} />\n        ) : (\n          <Redirect to=\"/login\" />\n        )\n      }\n    />\n  );\n};\n\nexport default PrivateRoute;\n","import React, { Component } from \"react\";\nimport Main from \"./components/MainComponent\";\nimport Login from \"./components/LoginComponent\";\nimport Spinner from \"react-spinner-material\";\nimport SignUp from \"./components/SignUpComponent\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport { auth } from \"./config/firebase.utils\";\nimport PrivateRoute from \"./helpers/PrivateRoute\";\nimport \"./index.css\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      authenticated: false,\n      currentuser: null,\n      loading: true,\n    };\n  }\n  componentDidMount() {\n    auth.onAuthStateChanged((user) => {\n\n      user\n        ? this.setState({\n          authenticated: true,\n          currentuser: user.providerData[0],\n          loading: false,\n        })\n        : this.setState({\n          authenticated: false,\n          currentuser: null,\n          loading: false,\n        });\n    });\n  }\n\n  render() {\n    return this.state.loading ? (\n      <div className=\"loader\">\n        <Spinner radius={70} color={\"#fc6c85\"} stroke={5} visible={true} />\n      </div>\n    ) : (\n        <Switch>\n          <PrivateRoute\n            path=\"/todo\"\n            authenticated={this.state.authenticated}\n            component={Main}\n          />\n          <Route exact path=\"/login\" component={Login} />\n          <Route exact path=\"/signup\" component={SignUp} />\n          <Redirect to=\"/login\" />\n        </Switch>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter basename=\"/\">\n      <App increment={1} />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}